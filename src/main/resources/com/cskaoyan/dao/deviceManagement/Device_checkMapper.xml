<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cskaoyan.dao.deviceManagement.Device_checkMapper">
  <resultMap id="BaseResultMap" type="com.cskaoyan.domain.deviceManagement.Device_check">
    <id column="device_check_id" jdbcType="VARCHAR" property="deviceCheckId" />
    <result column="device_id" jdbcType="VARCHAR" property="deviceId" />
    <result column="device_check_emp_id" jdbcType="VARCHAR" property="deviceCheckEmpId" />
    <result column="device_check_date" jdbcType="TIMESTAMP" property="deviceCheckDate" />
    <result column="device_check_result" jdbcType="VARCHAR" property="deviceCheckResult" />
    <result column="device_check_fault_id" jdbcType="VARCHAR" property="deviceCheckFaultId" />
  </resultMap>
  <sql id="Base_Column_List">
    device_check_id, device_id, device_check_emp_id, device_check_date, device_check_result, 
    device_check_fault_id
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from device_check
    where device_check_id = #{deviceCheckId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from device_check
    where device_check_id = #{deviceCheckId,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.cskaoyan.domain.deviceManagement.Device_check">
    insert into device_check (device_check_id, device_id, device_check_emp_id, 
      device_check_date, device_check_result, device_check_fault_id
      )
    values (#{deviceCheckId,jdbcType=VARCHAR}, #{deviceId,jdbcType=VARCHAR}, #{deviceCheckEmpId,jdbcType=VARCHAR}, 
      #{deviceCheckDate,jdbcType=TIMESTAMP}, #{deviceCheckResult,jdbcType=VARCHAR}, #{deviceCheckFaultId,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.cskaoyan.domain.deviceManagement.Device_check">
    insert into device_check
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="deviceCheckId != null">
        device_check_id,
      </if>
      <if test="deviceId != null">
        device_id,
      </if>
      <if test="deviceCheckEmpId != null">
        device_check_emp_id,
      </if>
      <if test="deviceCheckDate != null">
        device_check_date,
      </if>
      <if test="deviceCheckResult != null">
        device_check_result,
      </if>
      <if test="deviceCheckFaultId != null">
        device_check_fault_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="deviceCheckId != null">
        #{deviceCheckId,jdbcType=VARCHAR},
      </if>
      <if test="deviceId != null">
        #{deviceId,jdbcType=VARCHAR},
      </if>
      <if test="deviceCheckEmpId != null">
        #{deviceCheckEmpId,jdbcType=VARCHAR},
      </if>
      <if test="deviceCheckDate != null">
        #{deviceCheckDate,jdbcType=TIMESTAMP},
      </if>
      <if test="deviceCheckResult != null">
        #{deviceCheckResult,jdbcType=VARCHAR},
      </if>
      <if test="deviceCheckFaultId != null">
        #{deviceCheckFaultId,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.cskaoyan.domain.deviceManagement.Device_check">
    update device_check
    <set>
      <if test="deviceId != null">
        device_id = #{deviceId,jdbcType=VARCHAR},
      </if>
      <if test="deviceCheckEmpId != null">
        device_check_emp_id = #{deviceCheckEmpId,jdbcType=VARCHAR},
      </if>
      <if test="deviceCheckDate != null">
        device_check_date = #{deviceCheckDate,jdbcType=TIMESTAMP},
      </if>
      <if test="deviceCheckResult != null">
        device_check_result = #{deviceCheckResult,jdbcType=VARCHAR},
      </if>
      <if test="deviceCheckFaultId != null">
        device_check_fault_id = #{deviceCheckFaultId,jdbcType=VARCHAR},
      </if>
    </set>
    where device_check_id = #{deviceCheckId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.cskaoyan.domain.deviceManagement.Device_check">
    update device_check
    set device_id = #{deviceId,jdbcType=VARCHAR},
      device_check_emp_id = #{deviceCheckEmpId,jdbcType=VARCHAR},
      device_check_date = #{deviceCheckDate,jdbcType=TIMESTAMP},
      device_check_result = #{deviceCheckResult,jdbcType=VARCHAR},
      device_check_fault_id = #{deviceCheckFaultId,jdbcType=VARCHAR}
    where device_check_id = #{deviceCheckId,jdbcType=VARCHAR}
  </update>

  <!--逆向工程分割线.......................................................-->

  <select id="selectTableAmount"  resultType="string">
    select
    count(device_check_id)
    from device_check
  </select>

  <select id="getIdMappingName"  resultMap="BaseResultMap">
    select
    device_check_id
    from device_check
  </select>

  <resultMap id="VoResultMap" type="com.cskaoyan.domain.deviceManagement.vo.Device_checkVo">
    <id column="device_check_id" jdbcType="VARCHAR" property="deviceCheckId" />
    <result column="device_id" jdbcType="VARCHAR" property="deviceId" />
    <result column="device_check_emp_id" jdbcType="VARCHAR" property="deviceCheckEmpId" />
    <result column="device_check_date" jdbcType="TIMESTAMP" property="deviceCheckDate" />
    <result column="device_check_result" jdbcType="VARCHAR" property="deviceCheckResult" />
    <result column="device_check_fault_id" jdbcType="VARCHAR" property="deviceCheckFaultId" />
    <association column="device_id" property="deviceName" javaType="java.lang.String">
      <result column="device_name" property="deviceName"/>
    </association>
    <association column="device_check_emp_id" property="deviceCheckEmp" javaType="java.lang.String">
      <result column="emp_name" property="deviceCheckEmp"/>
    </association>
    <!--<association column="device_id" property="deviceName"
                 select="com.cskaoyan.dao.deviceManagement.DeviceMapper.selectDeviceNameByPrimaryKey" />
    <association column="device_check_emp_id" property="deviceCheckEmp"
                 select="???等待employee表接口" />-->
  </resultMap>

  <sql id="select_Column_List">
    device_check_id, dc.device_id, device_check_emp_id, device_check_date, device_check_result,
    device_check_fault_id
  </sql>

  <select id="selectByLimitOffset"  resultMap="VoResultMap">
    select
    <include refid="select_Column_List" />,device_name,emp_name
    from device_check dc
    left join device d on dc.device_id = d.device_id
    left join employee em ON dc.device_check_emp_id = em.emp_id
    limit #{limit,jdbcType=NUMERIC} offset #{offset,jdbcType=NUMERIC}
  </select>

  <sql id="select_MultiCondition">
    <where>
      <if test="SearchVo.deviceCheckId != null">
        <bind name="pattern" value="'%' + SearchVo.deviceCheckId + '%'" />
        device_check_id like #{pattern}
      </if>
      <if test="SearchVo.deviceName != null">
        <bind name="pattern" value="'%' + SearchVo.deviceName + '%'" />
        and device_name like #{pattern}
      </if>
    </where>
  </sql>

  <select id="selectByMultiCondition"  resultMap="VoResultMap">
    select
    <include refid="select_Column_List" />,device_name,emp_name
    from device_check dc
    left join device d on dc.device_id = d.device_id
    left join employee em ON dc.device_check_emp_id = em.emp_id
    <include refid="select_MultiCondition" />
    limit #{limit,jdbcType=NUMERIC} offset #{offset,jdbcType=NUMERIC}
  </select>

  <select id="selectTableAmountByMultiCondition"  resultType="string">
    select
    count(device_check_id)
    from device_check dc
    left join device d on dc.device_id = d.device_id
    left join employee em ON dc.device_check_emp_id = em.emp_id
    <include refid="select_MultiCondition" />
  </select>
</mapper>